from task_in_steps import Step, run_steps
import argparse
from os import listdir
from os.path import isdir, join, isfile
import re
import os


def main():
    config = Config().parse_args()
    run_steps(config, [
        CreateFolderForNginxConf(),
        CleanupOldConfigurations(),
        CreateNewReverseProxyConfigurations(),
        CreateDockerComposeFile(),
        CreateUpScript(),
        CreateDownScript(),
        SettingProtectedPortInProjects()
    ])

class Config:

    def parse_args(self):
        parser = argparse.ArgumentParser(description='Configure the reverse-proxy for multiple docker-compose projects')
        parser.add_argument('path', help='Path to the folder that contains the projects as folders')
        self.args = parser.parse_args()


        def is_project(root, project_name):
            directory = join(root, project_name)
            if not isdir(directory):
                return False
            if isfile(join(directory, 'docker-compose.yaml')):
                return True
            if isfile(join(directory, 'docker-compose.yml')):
                return True
            return False


        self.projects = [f for f in listdir(self.args.path) if is_project(self.args.path, f)]
        self.projects.sort()
        return self

    def clean_name(self, name):
        return re.sub('[^0-9a-zA-Z]+', '', name)

reverse_proxy_template = """
# this file is generated by init.py

server {
    server_name *.{project_name};

    location / {
        proxy_pass http://{project_name_clean}_reverse_proxy_1;
        proxy_set_header Host $host;
    }
}
"""

class CreateFolderForNginxConf(Step):

    def can_skip(self, config):
        return isdir('conf/reverse_proxy/conf.d')

    def run(self, config):
        os.system('mkdir -p conf/reverse_proxy/conf.d 2> /dev/null')


class CleanupOldConfigurations(Step):

    def run(self, config):
        conf_dir = 'conf/reverse_proxy/conf.d/' # TODO: move to config
        for f in [ f for f in listdir(conf_dir) if f.endswith(".conf") ]:
            os.remove(os.path.join(conf_dir, f)) # cleanup
        return True


class CreateNewReverseProxyConfigurations(Step):

    def run(self, conf):
        conf_dir = 'conf/reverse_proxy/conf.d/' # TODO: move to config
        for project in conf.projects:
            content = reverse_proxy_template
            content = content.replace('{project_name}', project)
            content = content.replace('{project_name_clean}', conf.clean_name(project))
            with open(f'{conf_dir}{project}.conf', 'w') as file:
                file.write(content)
        return True



class CreateDockerComposeFile(Step):
    docker_compose_template = """version: '3.5'

services:

  reverse_proxy:
    image: nginx:1.21.4
    restart: unless-stopped
    ports:
      - 80:80
    volumes:
      - ./conf/reverse_proxy/conf.d:/etc/nginx/conf.d
      - /var/run/docker.sock:/tmp/docker.sock:ro
    networks:
{networks}

networks:
{network_definitions}

"""
    def run(self, config):
        networks = ''
        network_definitions = ''
        for project in config.projects:
            networks += f'      - {config.clean_name(project)}_reverse-proxy-net\n'
            network_definitions += f'  {config.clean_name(project)}_reverse-proxy-net:\n    external: true\n'

        docker_compose_content = self.docker_compose_template
        docker_compose_content = docker_compose_content.replace('{networks}', networks)
        docker_compose_content = docker_compose_content.replace('{network_definitions}', network_definitions)
        with open('docker-compose.yaml', 'w') as f:
            f.write(docker_compose_content)
        return True



class CreateUpScript(Step):

    def run(self, config):
        up_script = 'ORIGINAL_PWD=$PWD\n'

        for project in config.projects:
            path = join(config.args.path, project)
            up_script += '\n'
            up_script += f'cd {path}\n'
            up_script += 'docker-compose up -d\n'
            up_script += 'cd $ORIGINAL_PWD\n'
        up_script += '\ndocker-compose up -d\n'
        with open('up.sh', 'w') as f:
            f.write(up_script)
        os.system('chmod +x up.sh')
        return True


class CreateDownScript(Step):

    def run(self, config):
        down_script = 'ORIGINAL_PWD=$PWD\ndocker-compose down &\n'
        for project in config.projects:
            path = join(config.args.path, project)
            down_script += '\n'
            down_script += f'cd {path}\n'
            down_script += 'docker-compose down &\n'
            down_script += 'cd $ORIGINAL_PWD\n'
            down_script += '\n'
        with open('down.sh', 'w') as f:
            f.write(down_script)
        os.system('chmod +x down.sh')
        return True
    


class SettingProtectedPortInProjects(Step):

    def run(self, config):
        current_port = 9001
        for project in config.projects:
            path = join(config.args.path, project)
            env_path = join(path, '.env')
            env_content = open(env_path, 'r').readlines()
            found = False
            for line_number, line in enumerate(env_content):
                if 'PORT=' in line.replace(' ', ''):
                    found = True
                    env_content[line_number] = f'PORT={current_port}\n'
            if not found:
                env_content.append(f'PORT={current_port}\n')
            current_port += 1
        return True

        
if __name__ == "__main__":
    main()