import argparse
from os import listdir
from os.path import isdir, join, isfile
import re
import os

os.system('mkdir -p conf/reverse_proxy/conf.d 2> /dev/null')

parser = argparse.ArgumentParser(description='Configure the reverse-proxy for multiple docker-compose projects')
parser.add_argument('path', help='Path to the folder that contains the projects as folders')
args = parser.parse_args()


def is_project(root, project_name):
    directory = join(root, project_name)
    if not isdir(directory):
        return False
    if isfile(join(directory, 'docker-compose.yaml')):
        return True
    if isfile(join(directory, 'docker-compose.yml')):
        return True
    return False


projects = [f for f in listdir(args.path) if is_project(args.path, f)]

reverse_proxy_template = """
# this file is generated by init.py

server {
    server_name *.{project_name};

    location / {
        proxy_pass http://{project_name_clean}_reverse_proxy_1;
        proxy_set_header Host $host;
    }
}
"""

def clean_name(name):
    return re.sub('[^0-9a-zA-Z]+', '', name)

# Cleanup old confs
conf_dir = 'conf/reverse_proxy/conf.d/' #
for f in [ f for f in listdir(conf_dir) if f.endswith(".conf") ]:
    os.remove(os.path.join(conf_dir, f)) # cleanup

# Create new (reverse_proxy confs)
for project in projects:
    content = reverse_proxy_template
    content = content.replace('{project_name}', project)
    content = content.replace('{project_name_clean}', clean_name(project))
    with open(f'{conf_dir}{project}.conf', 'w') as file:
        file.write(content)
projects.sort()

# Create a docker-compose.yaml file 
docker_compose_template = """version: '3.5'

services:

  reverse_proxy:
    image: nginx:1.21.4
    restart: unless-stopped
    ports:
      - 80:80
    volumes:
      - ./conf/reverse_proxy/conf.d:/etc/nginx/conf.d
      - /var/run/docker.sock:/tmp/docker.sock:ro
    networks:
{networks}

networks:
{network_definitions}

"""
networks = ''
network_definitions = ''
for project in projects:
    networks += f'      - {clean_name(project)}_reverse-proxy-net\n'
    network_definitions += f'  {clean_name(project)}_reverse-proxy-net:\n    external: true\n'

docker_compose_content = docker_compose_template
docker_compose_content = docker_compose_content.replace('{networks}', networks)
docker_compose_content = docker_compose_content.replace('{network_definitions}', network_definitions)
with open('docker-compose.yaml', 'w') as f:
    f.write(docker_compose_content)

# Crate a startup/teardown script
up_script = 'ORIGINAL_PWD=$PWD\n'


for project in projects:
    path = join(args.path, project)
    up_script += '\n'
    up_script += f'cd {path}\n'
    up_script += 'docker-compose up -d\n'
    up_script += 'cd $ORIGINAL_PWD\n'
up_script += '\ndocker-compose up -d\n'
with open('up.sh', 'w') as f:
    f.write(up_script)
os.system('chmod +x up.sh')

down_script = 'ORIGINAL_PWD=$PWD\ndocker-compose down &\n'
for project in projects:
    path = join(args.path, project)
    down_script += '\n'
    down_script += f'cd {path}\n'
    down_script += 'docker-compose down &\n'
    down_script += 'cd $ORIGINAL_PWD\n'
    down_script += '\n'
with open('down.sh', 'w') as f:
    f.write(down_script)
os.system('chmod +x down.sh')

# Setting a protected port in every .env
current_port = 9001
for project in projects:
    path = join(args.path, project)
    env_path = join(path, '.env')
    env_content = open(env_path, 'r').readlines()
    found = False
    for line_number, line in enumerate(env_content):
        if 'PORT=' in line.replace(' ', ''):
            found = True
            env_content[line_number] = f'PORT={current_port}\n'
    if not found:
        env_content.append(f'PORT={current_port}\n')
    current_port += 1

        
